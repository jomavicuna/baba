---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

const allNotes = await getCollection('notes');

// Build graph data
const nodes = allNotes.map(note => ({
  id: note.id.replace('.md', ''),
  title: note.data.title || note.id.replace('.md', ''),
  tags: note.data.tags || [],
}));

const links: Array<{ source: string; target: string }> = [];

// Find all wikilinks
allNotes.forEach(note => {
  const content = note.body || '';
  const wikiLinkRegex = /\[\[([^\]]+)\]\]/g;
  let match;

  while ((match = wikiLinkRegex.exec(content)) !== null) {
    const targetTitle = match[1];
    const targetNote = allNotes.find(n =>
      (n.data.title === targetTitle) ||
      n.id.replace('.md', '') === targetTitle
    );

    if (targetNote) {
      links.push({
        source: note.id.replace('.md', ''),
        target: targetNote.id.replace('.md', ''),
      });
    }
  }
});

const graphData = { nodes, links };
---

<BaseLayout title="Graph View">
  <h1>Graph View</h1>
  <p>Interactive visualization of note connections</p>

  <div id="graph"></div>

  <script define:vars={{ graphData }}>
    import * as d3 from 'd3';

    const width = Math.min(window.innerWidth - 100, 1200);
    const height = 600;

    const svg = d3.select('#graph')
      .append('svg')
      .attr('width', width)
      .attr('height', height)
      .attr('viewBox', [0, 0, width, height]);

    const simulation = d3.forceSimulation(graphData.nodes)
      .force('link', d3.forceLink(graphData.links).id(d => d.id).distance(100))
      .force('charge', d3.forceManyBody().strength(-300))
      .force('center', d3.forceCenter(width / 2, height / 2))
      .force('collision', d3.forceCollide().radius(30));

    const link = svg.append('g')
      .selectAll('line')
      .data(graphData.links)
      .join('line')
      .attr('stroke', '#64b5f6')
      .attr('stroke-opacity', 0.6)
      .attr('stroke-width', 2);

    const node = svg.append('g')
      .selectAll('g')
      .data(graphData.nodes)
      .join('g')
      .call(d3.drag()
        .on('start', dragstarted)
        .on('drag', dragged)
        .on('end', dragended));

    node.append('circle')
      .attr('r', 8)
      .attr('fill', '#64b5f6')
      .attr('stroke', '#1e1e1e')
      .attr('stroke-width', 2);

    node.append('text')
      .text(d => d.title)
      .attr('x', 12)
      .attr('y', 4)
      .attr('fill', '#e0e0e0')
      .attr('font-size', '12px');

    node.append('title')
      .text(d => d.title);

    node.on('click', (event, d) => {
      window.location.href = `/notes/${d.id}`;
    });

    simulation.on('tick', () => {
      link
        .attr('x1', d => d.source.x)
        .attr('y1', d => d.source.y)
        .attr('x2', d => d.target.x)
        .attr('y2', d => d.target.y);

      node.attr('transform', d => `translate(${d.x},${d.y})`);
    });

    function dragstarted(event) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      event.subject.fx = event.subject.x;
      event.subject.fy = event.subject.y;
    }

    function dragged(event) {
      event.subject.fx = event.x;
      event.subject.fy = event.y;
    }

    function dragended(event) {
      if (!event.active) simulation.alphaTarget(0);
      event.subject.fx = null;
      event.subject.fy = null;
    }
  </script>

  <style>
    #graph {
      border: 1px solid var(--border);
      border-radius: 8px;
      margin-top: 2rem;
      background: #0a0a0a;
    }

    #graph svg {
      display: block;
    }

    #graph circle {
      cursor: pointer;
    }

    #graph circle:hover {
      fill: #90caf9;
    }
  </style>
</BaseLayout>
